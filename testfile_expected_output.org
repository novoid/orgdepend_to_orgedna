* org-depend_to_org-edna test file

This file contains all kinds of Org mode org-depend and org-edna
snippets that should be converted to org-edna only.

Additionally to the simple unit tests, converting this file and
comparing to =testfile_expected_output.org= is the ultimative test run
for this tool.

* org-depend projects

** Simple test project

*** STARTED trigger with one reference
:PROPERTIES:
:CREATED:  [2020-09-19 Sat 11:17]
:TRIGGER: ids("id:2020-09-19-task-2") todo!(NEXT)
:END:

*** STARTED trigger with two references
SCHEDULED: <2020-09-19 Sat> DEADLINE: <2020-09-20 Sun>
:PROPERTIES:
:CREATED:  [2020-09-19 Sat 11:17]
:TRIGGER: ids("id:2020-09-19-task-2") todo!(NEXT) ids("id:2020-09-19-task-3") todo!(STARTED)
:END:

*** task 2: no blocker/trigger
:PROPERTIES:
:CREATED:  [2020-09-19 Sat 11:17]
:ID:       2020-09-19-task-2
:END:

*** task 3: 1 blocker
:PROPERTIES:
:CREATED:  [2020-09-19 Sat 11:19]
:BLOCKER: ids("id:2020-09-19-task-2")
:ID:       2020-09-19-task-3
:END:

*** task with 2 blockers
:PROPERTIES:
:CREATED:  [2020-09-19 Sat 11:35]
:BLOCKER: ids("id:2020-09-19-task-3" "id:2020-09-19-task-2")
:END:

*** task with 2 blockers and trigger with two reference
SCHEDULED: <2020-09-19 Sat>
:PROPERTIES:
:CREATED:  [2020-09-19 Sat 11:35]
:BLOCKER: ids("id:2020-09-19-task-3" "id:2020-09-19-task-2")
:TRIGGER: ids("id:2020-09-19-task-2") todo!(NEXT) ids("id:2020-09-19-task-3") todo!(STARTED)
:END:

** Yankpad snippet (yasnippet managed within Org mode)

\** WAITING get final lecture slots
:PROPERTIES:
:ID: FPHD-`(my-capture-insert 'my-year)`-get-slot-info
:TRIGGER: ids("id:FPHD-`(my-capture-insert 'my-year)`-write-slots-to-org") todo!(NEXT) ids("id:FPHD-`(my-capture-insert 'my-year)`-write-slots-to-business-calendar") todo!(NEXT) ids("id:FPHD-`(my-capture-insert 'my-year)`-write-slots-to-paper-calendar") todo!(NEXT) ids("id:FPHD-`(my-capture-insert 'my-year)`-eCampus-created") todo!(NEXT)
:END:

- this is some information

\** Write lecture slots to Org
:PROPERTIES:
:BLOCKER: ids("id:FPHD-`(my-capture-insert 'my-year)`-get-slot-info")
:ID: FPHD-`(my-capture-insert 'my-year)`-write-slots-to-org
:TRIGGER: ids("id:FPHD-`(my-capture-insert 'my-year)`-define-essay-deadline") todo!(NEXT)
:END:

\** Write slots to business calendar
:PROPERTIES:
:ID: FPHD-`(my-capture-insert 'my-year)`-write-slots-to-business-calendar
:BLOCKER: ids("id:FPHD-`(my-capture-insert 'my-year)`-get-slot-info")
:END:

\** Write slots to paper calendar
:PROPERTIES:
:ID: FPHD-`(my-capture-insert 'my-year)`-write-slots-to-paper-calendar
:BLOCKER: ids("id:FPHD-`(my-capture-insert 'my-year)`-get-slot-info")
:END:

\** [#A] Create eCampus
SCHEDULED: <`(my-capture-insert 'my-year)`-02-10>
:PROPERTIES:
:BLOCKER: ids("id:FPHD-`(my-capture-insert 'my-year)`-get-slot-info")
:ID: FPHD-`(my-capture-insert 'my-year)`-eCampus-created
:TRIGGER: ids("id:FPHD-`(my-capture-insert 'my-year)`-setup-eCampus-chapters") todo!(NEXT) ids("id:FPHD-`(my-capture-insert 'my-year)`-read-last-years-emails") todo!(NEXT)
:END:

\** Setup eCampus chapters
SCHEDULED: `(my-capture-insert 'my-ecampus-start-preparation)`
:PROPERTIES:
:ID: FPHD-`(my-capture-insert 'my-year)`-setup-eCampus-chapters
:BLOCKER: ids("id:FPHD-`(my-capture-insert 'my-year)`-eCampus-created")
:END:

\** Skim previous year's emails
SCHEDULED: `(my-capture-insert 'my-ecampus-start-preparation)`
:PROPERTIES:
:ID: FPHD-`(my-capture-insert 'my-year)`-read-last-years-emails
:BLOCKER: ids("id:FPHD-`(my-capture-insert 'my-year)`-eCampus-created")
:END:

\** Define deadline for essay
:PROPERTIES:
:ID: FPHD-`(my-capture-insert 'my-year)`-define-essay-deadline
:BLOCKER: ids("id:FPHD-`(my-capture-insert 'my-year)`-write-slots-to-org")
:END:

... and so forth ...

** Cabaret template (yankpad)

\*** Kabarettabendorga: `(my-capture-prompt "ISO-Datum Veranstaltung" 'my-event-date)` `(my-capture-prompt "Künstler" 'my-artist)`                   :`(my-capture-insert 'my-artist)`:Kabarett:
:PROPERTIES:
:ID: `(my-capture-insert 'my-event-date)`-y-Kabarett
:END:

- Titel                   : `(my-capture-prompt "Programmname" 'my-programname)`

- `(my-capture-prompt "Anzahl der reservierten Plätze" 'my-num-seats)` Plätze gesamt
  - 2:
  - 2:
  - 2:

\**** NEXT Email: `(my-capture-insert 'my-num-seats)`-2 Plätze noch zu vergeben
SCHEDULED: <`(my-capture-prompt "ISO-Datum Email-Aussendung" 'my-email-date)`>
:PROPERTIES:
:ID: `(my-capture-insert 'my-event-date)`-k-email1
:END:

- Email an "kabarettinteressierte" (mutt-alias)
- Eintragen in Liste oben

#+BEGIN_QUOTE
Kabarett: `(my-capture-insert 'my-artist)` am `(my-capture-insert 'my-event-date)`

Hallo Kabarettfreunde!

Es ist wieder soweit:

  Wer:    `(my-capture-insert 'my-artist)`
  Was:    "`(my-capture-insert 'my-programname)`"
  Wann:   `(my-capture-insert 'my-event-date)` 19:15 Abendkassa
  Wo:     `(my-capture-selection '("Theatercafé" "Orpheum" "FIXXME") 'my-location)`

[...]

Wir freuen uns!
#+END_QUOTE

\**** NEXT Kabarett-Reminder an alle angemeldeten
SCHEDULED: <`(my-capture-prompt "ISO-Datum Erinnerungsemail" 'my-reminder-date)`>
:PROPERTIES:
:BLOCKER: ids("id:`(my-capture-insert 'my-event-date)`-k-email1")
:ID: `(my-capture-insert 'my-event-date)`-k-email2
:END:

#+BEGIN_QUOTE
Erinnerung: Kabarett `(my-capture-insert 'my-artist)` am `(my-capture-insert 'my-event-date)`

Hallo Kabarettinteressierter!

[...]

Wir freuen uns!
#+END_QUOTE

\**** <`(my-capture-insert 'my-event-date)` 19:00-20:00> Kabarett-Vorglühen              :@Stadt:
:PROPERTIES:
:ID: `(my-capture-insert 'my-event-date)`-kabarettvorgluehen
:END:

\**** <`(my-capture-insert 'my-event-date)` 20:00-23:30> `(my-capture-insert 'my-artist)`: "`(my-capture-insert 'my-programname)`" (`(my-capture-insert 'my-location)`, DND) :@Stadt:
:PROPERTIES:
:ID: `(my-capture-insert 'my-event-date)`-kabarettabend
:END:

* org-edna projects

Those lines should never be modified by the conversion tool.

** Test project with org-edna 1


*** TODO task A
SCHEDULED: <2020-07-31 Fri>
:PROPERTIES:
:EFFORT: 3d
:ID: 2020-09-24-taskA
:TRIGGER: ids("2020-09-24-taskB") scheduled!(".") todo!(TODO)  ids("2020-09-24-taskC") scheduled!("++3d") todo!(STARTED)
:CREATED:  [2020-07-31 Fri 12:56]
:END:

*** task B
:PROPERTIES:
:ID: 2020-09-24-taskB
:EFFORT: 2d
:END:

*** task C
:PROPERTIES:
:ID: 2020-09-24-taskC
:EFFORT: 1d
:TRIGGER: ids("2020-09-24-taskD") scheduled!(".") todo!(WAITING)
:END:

*** task D
:PROPERTIES:
:ID: 2020-09-24-taskD
:EFFORT: 5d
:END:

** NEXT [0/2] Example org-edna project: Garage Project                               :GProj:project:
:PROPERTIES:
:COLUMNS:  %40ITEM %6Effort(Effort){:} %60BLOCKER
:CREATED:  [2020-08-14 Fri 11:59]
:COOKIE_DATA: todo recursive
:END:

*** NEXT Find local stores for paint
SCHEDULED: <2020-09-19 Sat>
:PROPERTIES:
:Effort:   3h
:TRIGGER:  ids("gar-proj-Buy-paint") todo!(NEXT) scheduled!(".")
:ID:       gar-proj-Find-local-stores-for-paint
:CREATED:  [2020-09-19 Sat 11:16]
:END:

*** NEXT Choose color for paint
:PROPERTIES:
:Effort:   3h
:ID:       gar-proj-Choose-color-for-paint
:TRIGGER:  ids("gar-proj-Buy-paint") todo!(NEXT) scheduled!(".")
:END:

*** Buy paint
:PROPERTIES:
:Effort:   3h
:ID:       gar-proj-Buy-paint
:BLOCKER:  ids("gar-proj-Find-local-stores-for-paint" "gar-proj-Choose-color-for-paint")
:TRIGGER:  ids("gar-proj-Move-car-to-nearby-parking-lot") todo!(NEXT) scheduled!(".") ids("gar-proj-Remove-bikes") todo!(NEXT) scheduled!(".") ids("gar-proj-Remove-stuff-from-shelves") todo!(NEXT) scheduled!(".")
:END:

FIXXME: Here, I still don't know how to achieve that "Buy paint" is
only scheduled when both prior tasks are marked as DONE.

*** Move car to nearby parking lot
:PROPERTIES:
:Effort:   1h
:ID:       gar-proj-Move-car-to-nearby-parking-lot
:BLOCKER:  ids("gar-proj-Buy-paint")
:TRIGGER:  ids("gar-proj-Garage-is-empty") todo!(DONE) scheduled!(".")
:END:

Please notice that as of 2020-08-14 and org edna version 1.0.2,
headings without an active keywords can be marked as DONE despite the
fact that they're blocked. I've reported this bug already and hope for
a fix.

*** Remove bikes
:PROPERTIES:
:Effort:   1h
:ID:       gar-proj-Remove-bikes
:BLOCKER:  ids("gar-proj-Buy-paint")
:TRIGGER:  ids("gar-proj-Garage-is-empty") todo!(DONE)
:END:

*** Remove stuff from shelves
:PROPERTIES:
:Effort:   2d
:ID:       gar-proj-Remove-stuff-from-shelves
:BLOCKER:  ids("gar-proj-Buy-paint")
:TRIGGER:  ids("gar-proj-Remove-shelves") todo!(NEXT) scheduled!("++1d")
:END:

*** Remove shelves
:PROPERTIES:
:Effort:   1d
:ID:       gar-proj-Remove-shelves
:BLOCKER:  ids("gar-proj-Remove-stuff-from-shelves")
:TRIGGER:  ids("gar-proj-Garage-is-empty") todo!(DONE)
:END:

*** Garage is empty
:PROPERTIES:
:ID:       gar-proj-Garage-is-empty
:BLOCKER:  ids("gar-proj-Move-car-to-nearby-parking-lot" "gar-proj-Remove-bikes" "gar-proj-Remove-shelves")
:TRIGGER:  ids("gar-proj-Paint-walls-and-floor") todo!(NEXT) scheduled!("++1d")
:END:

*** Paint walls and floor
:PROPERTIES:
:Effort:   1d
:ID:       gar-proj-Paint-walls-and-floor
:BLOCKER:  ids("gar-proj-Garage-is-empty")
:TRIGGER:  ids("gar-proj-Re-install-shelves") todo!(NEXT) scheduled!("++2d")
:END:

*** Re-install shelves
:PROPERTIES:
:Effort:   8h
:ID:       gar-proj-Re-install-shelves
:BLOCKER:  ids("gar-proj-Paint-walls-and-floor")
:TRIGGER:  ids("gar-proj-Bring-back-bikes-into-garage") todo!(NEXT) scheduled!(".")  ids("gar-proj-Bring-back-car-into-garage") todo!(NEXT) scheduled!(".")
:END:

*** Bring back bikes into garage
:PROPERTIES:
:Effort:   1h
:ID:       gar-proj-Bring-back-bikes-into-garage
:BLOCKER:  ids("gar-proj-Re-install-shelves")
:TRIGGER:  ids("gar-proj-Celebrate-and-close-project") todo!(NEXT) scheduled!(".")
:END:

*** Bring back car into garage
:PROPERTIES:
:Effort:   1h
:ID:       gar-proj-Bring-back-car-into-garage
:BLOCKER:  ids("gar-proj-Re-install-shelves")
:TRIGGER:  ids("gar-proj-Celebrate-and-close-project") todo!(NEXT) scheduled!(".")
:END:

*** Celebrate and close project
:PROPERTIES:
:BLOCKER: consider(all) rest-of-siblings-wrap
:ID:       gar-proj-Celebrate-and-close-project
:END:

